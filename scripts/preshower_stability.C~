#include <TSystem.h>
#include <TChain.h>
#include <TString.h>
#include "TFile.h"
#include "TTree.h"
#include <TNtuple.h>
#include "TCanvas.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include "TMath.h"
#include "TH1F.h"
#include <TH2.h>
#include <TStyle.h>
#include <TGraph.h>
#include <TROOT.h>
#include <TMath.h>
#include <TLegend.h>
#include <TPaveLabel.h>
#include <TProfile.h>
#include <TPolyLine.h>
#include <TObjArray.h>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include<math.h>
#include <stack>
#include "TLorentzVector.h"
#include "TCut.h"
#include "TLatex.h"
#include "TLine.h"


//// Vectors to store the sliced histograms in. Declaring them outside so all the functions can see them. 
  std::vector<TH1D*> hist_vector_data; 
  std::vector<TH1D*> hist_vector_p; 
  std::vector<TH1D*> hist_vector_n; 

std::vector<TH1D*> hist_result_vector_p; 
std::vector<TH1D*> hist_result_vector_n; 

// these global histograms are going to temporarily hold the proton and neutron slices for when I call the fit function. 
TH1D *hist_p;
TH1D *hist_n;



//// struct to store everything for each slice
struct SliceResults{
  //// histograms
  //TH1D *hist_data; // dx from data
  // TH1D *hist_proton; // dx from proton mc
  //TH1D *hist_neutron; // dx from neutron mc

  //// statistics
  int nEntries_data = 0;
  int nEntries_proton = 0;
  int nEntries_neutron = 0;

  //// Fits. Maybe multuple fits? Maybe start with 4th order poly.
  TF1 *overall_fit;

};


// Functions 
void SliceAndProjectHistogram_xMaxFixed(TH2D* hist2D, const std::vector<double>& xSlices, std::vector<TH1D*>& histVector, double xMax, std::string xAxisName, std::string yAxisName, std::string type);
Double_t mc_p_n_poly4_slice_fit(Double_t *x, Double_t *par);
TH1D* shiftHistogramX(TH1D* originalHist, double shiftValue);

void preshower_stability(){ // main
  // bit of a test for now. Will need to make this more sophisticated in the future. 

  gStyle->SetNumberContours(255); 

  


  TFile *f1 = TFile::Open("/w/halla-scshelf2102/sbs/msatnik/GMn/output/sbs4_30p_test.root"); // data

  TFile *f2 = TFile::Open("/w/halla-scshelf2102/sbs/msatnik/GMn/output/sbs4_30p_test_mc_p.root"); //proton

  TFile *f3 = TFile::Open("/w/halla-scshelf2102/sbs/msatnik/GMn/output/sbs4_30p_test_mc_n.root"); //neutron

 

// set location and name for output file 
  // TString outputfilename = "../output/" + configfileinput + ".root";
  TString outputfilename = "../output/preshower_stability_test.root";

 // Declare outfile
  // TFile *fout = new TFile( Form("../output/sbs%d.root",kine), "RECREATE" );
  //TFile *fout = new TFile("../output/sbs4_30p.root", "RECREATE" );
  TFile *fout = new TFile(outputfilename,"RECREATE");
  cout<<"writing to file: "<< outputfilename <<endl;


   // Load Histograms
  TH2D *hist_data_orig = (TH2D*)f1->Get("hcal_dx__ps_e");
  TH2D *hist_proton_orig = (TH2D*)f2->Get("hcal_dx__ps_e");
  TH2D *hist_neutron_orig = (TH2D*)f3->Get("hcal_dx__ps_e");

  // Make clones of the histograms
 TH2D *hist_2D_data = (TH2D*)hist_data_orig->Clone("hist_2D_data");
 TH2D *hist_2D_proton = (TH2D*)hist_proton_orig->Clone("hist_2D_proton");
 TH2D *hist_2D_neutron = (TH2D*)hist_neutron_orig->Clone("hist_2D_neutron");

  // Set up the slices for the Y projections. 
 int nslices = 10;
  std::vector<double> xSlices = {0.1,0.12,0.14,0.16,0.18,0.20,0.22,0.24,0.26,0.28};
  double ps_e_max= 3;

  //// Vectors to store the sliced histograms in. What if I made these globals?
  std::vector<TH1D*> hist_vector_data; 
  std::vector<TH1D*> hist_vector_p; 
  std::vector<TH1D*> hist_vector_n; 

  // use the function to make the slices and projections
  SliceAndProjectHistogram_xMaxFixed(hist_2D_proton, xSlices, hist_vector_p, ps_e_max, "ps_e","dx","p");
  SliceAndProjectHistogram_xMaxFixed(hist_2D_neutron, xSlices, hist_vector_n, ps_e_max, "ps_e","dx","n");
  SliceAndProjectHistogram_xMaxFixed(hist_2D_data, xSlices, hist_vector_data, ps_e_max, "ps_e","dx","data");

 
  // testing out fitting histograms
  double xmin = -3; // -1.8
  double xmax = 2.5;//1;
  double initialParameters[9] = {1,1,0,0,1,1,1,1,1};
   TF1 *overall_fit = new TF1("overall_fit", mc_p_n_poly4_slice_fit, xmin, xmax, 9); //

   TH1D *hist_1d_test_data = hist_vector_data[9];
   //// global histograms that the fit function will use. Need to be set up properly before fit function is called. 
   hist_p = hist_vector_p[9];
   hist_n = hist_vector_n[9];

  // Set initial parameters for the fit function
     overall_fit->SetParameters(initialParameters); // Define initial parameters
     overall_fit->SetNpx(500);
    
// // Fit combined histogram with custom fit function
     hist_1d_test_data->GetXaxis() ->SetRangeUser(xmin, xmax);
     hist_1d_test_data->Fit(overall_fit,"Q");

     std::vector<TF1*> fit_vector;

     std::vector<TH1D*> hist_result_p_vector;
     std::vector<TH1D*> hist_result_n_vector;

     std::vector<double> scale_p_vector;
     std::vector<double> scale_n_vector;
     std::vector<double> shift_p_vector;
     std::vector<double> shift_n_vector;

     std::vector<double> scale_p_err_vector;
     std::vector<double> scale_n_err_vector;

     std::vector<double> ChiSq_vector;
     std::vector<double> ndf_vector;

     std::vector<double> Rsf_vector;
     std::vector<double> Rsf_err_vector;
 
     


     TH1D *hist_data;

    

     /// Fit each slice 
     for (int sliceid = 0 ; sliceid < xSlices.size() ; sliceid++)
       {
     	 /// set up the global histograms that the fit function is going to use
	 // this uses clones of the histograms
	 hist_p  =(TH1D*)hist_vector_p[sliceid]->Clone("hist_p");
	 hist_n  =(TH1D*)hist_vector_n[sliceid]->Clone("hist_n");
	 hist_data  =(TH1D*)hist_vector_data[sliceid]->Clone("hist_data");

	 //// this uses the histograms themselves: you can't uncouple the fit from them easily 
	 // hist_p  =hist_vector_p[sliceid];
	 // hist_n  =hist_vector_n[sliceid];
	 // hist_data  =hist_vector_data[sliceid];

	 
	 TF1 *fit = new TF1(Form("overall_fit_%i_",sliceid),mc_p_n_poly4_slice_fit, xmin, xmax, 9);
	 fit->SetParameters(initialParameters); 
	 fit->SetNpx(500);
	 hist_data->GetXaxis() ->SetRangeUser(xmin, xmax);
	 hist_data->Fit(fit,"Q");

	 // retrieve fit results 
	 double scale_p  = fit ->GetParameter(0);
	 double scale_p_err = fit ->GetParError(0);
	 double scale_n  = fit ->GetParameter(1);
	 double scale_n_err = fit ->GetParError(1);

	 double shift_p= fit ->GetParameter(2); 
	 double shift_n = fit ->GetParameter(3);
	  
	 double ChiSq= fit->GetChisquare();
	 double ndf = fit->GetNDF();

	 /// should record the background result so we can plot it later if we want 

	 //compute results
	 double Rsf = scale_n/scale_p;
	 double Rsf_err = Rsf * sqrt( pow( (scale_n_err / scale_n), 2) + pow( (scale_p_err / scale_p),2) ); //just adding the uncert from the fit parameters in quadrature for now. 

	 //// save results into the vectors 
	 fit_vector.push_back(fit);
	 scale_p_vector.push_back(scale_p);
	 scale_n_vector.push_back(scale_n);
	 scale_p_err_vector.push_back(scale_p_err);
	 scale_n_err_vector.push_back(scale_n_err);
	 shift_p_vector.push_back(shift_p);
	 shift_n_vector.push_back(shift_n);
	 ChiSq_vector.push_back(ChiSq);
	 ndf_vector.push_back(ndf);
	 Rsf_vector.push_back(Rsf);
	 Rsf_err_vector.push_back(Rsf_err);
	  
	 //delete fit; // so if we leave this in it deletes the object that fit is pointing to, which is our fit result lol. 
       }// end loop over slices



     TH1D *hist_result_p;
     TH1D *hist_result_n;

     // // loop over the slices to create shifted and scaled versions of the mc histograms to plot
     // for (int sliceid = 0 ; sliceid < xSlices.size() ; sliceid++)
     //   {
     // 	 hist_result_p = hist_vector_p[sliceid];
	 
	
     //   }


 // canvas
     TCanvas *c2 = new TCanvas("c2","c2",800,600);
     hist_vector_data[4]->Draw();
     fit_vector[4]->SetLineColor(kGreen);
     fit_vector[4]->Draw("same");

  fout->Write();

  f1->Close();
  f2->Close();
  f3->Close();

}// End Main


void SliceAndProjectHistogram_xMaxFixed(TH2D* hist2D, const std::vector<double>& xSlices, std::vector<TH1D*>& histVector, double xMax, std::string xAxisName, std::string yAxisName, std::string type) {
    // Clear the vector to ensure it's empty before filling
    histVector.clear();
    // Find the bin number of the x endpoint 
    int binMax = hist2D->GetXaxis()->FindBin(xMax);

    // loop over the slices 
    for (size_t i = 0; i < xSlices.size() ; ++i) { //-1
      double xMin = xSlices[i];
      int binMin = hist2D ->GetXaxis()->FindBin(xMin);

      // Define the name and title for the TH1D histogram
      // Format the histogram name to display only two decimal places
      std::ostringstream stream;
      stream << std::fixed << std::setprecision(2) << "_"<<xMin << "_to_" << xMax;
      std::string histName = yAxisName+"__"+xAxisName + stream.str() + "_" +type;
      TH1D *projY = hist2D->ProjectionY(histName.c_str(), binMin, binMax);
      histVector.push_back(projY); // 

    }// end loop over slices
}// end SliceAndProjectHistogram_xMaxFixed

// Fit that is a combination of the scaled proton mc, scaled neutron mc, and 4th order polynomial. 
// possible probelm: here I am relying on the histP and histN being globals. 
/// oh could have the final parameter be the index of the slice we need to grab 
Double_t mc_p_n_poly4_slice_fit(Double_t *x, Double_t *par) {
    
    Double_t val = 0.0;

    // Get x value
    Double_t xx = x[0];

    // Retrieve parameters
    Double_t scale_p = par[0];
    Double_t scale_n = par[1];
    Double_t shift_p = par[2];
    Double_t shift_n = par[3];

    Double_t polyCoefficients[5]; 
    
    // Fill polynomial coefficients 
    for (Int_t i = 0; i <=4; ++i) {
        polyCoefficients[i] = par[i + 4];
    }

    //// hist_p and hist_n are globals that need to be set to the proper histograms right before you call the fit function. 

    // Calculate value using combination of histograms and polynomial background
    val = scale_p *hist_p ->Interpolate(xx-shift_p) + scale_n *hist_n ->Interpolate(xx-shift_n);

    // Add polynomial background
    for (Int_t i = 0; i <= 4; ++i) {
        val += polyCoefficients[i] * TMath::Power(xx, i);
    }

    return val;
}


// Utility function to shift every bin of a TH1D along the x-axis
  TH1D* shiftHistogramX(TH1D* originalHist, double shiftValue) {
    if (!originalHist) return nullptr;
    // Preserve the total number of entries in the histogram for further analysis
    double totalEntries = originalHist->GetEntries();
    // Create a new histogram with the same binning as the original
    TH1D *shiftedHist = (TH1D*)(originalHist->Clone("shiftedHist"));
    // Clear the contents of the cloned histogram
    shiftedHist->Reset();
    // Shift each bin
    for (int i = 1; i <= originalHist->GetNbinsX(); ++i) {
      // Calculate new bin center
      double oldBinCenter = originalHist->GetBinCenter(i);
      double oldBinContent = originalHist->GetBinContent(i);
      double oldBinError = originalHist->GetBinError(i);
      // Find the bin in the new histogram that corresponds to the new bin center
      int newBin = shiftedHist->FindBin(oldBinCenter + shiftValue);
      // Add the content and error to the new bin
      // Note: If multiple old bins shift into the same new bin, their contents and errors are added
      double newBinContent = shiftedHist->GetBinContent(newBin) + oldBinContent;
      double newBinError = sqrt(pow(shiftedHist->GetBinError(newBin), 2) + pow(oldBinError, 2));
      shiftedHist->SetBinContent(newBin, newBinContent);
      shiftedHist->SetBinError(newBin, newBinError);
    }
    // Restore the total number of entries
    shiftedHist->SetEntries(totalEntries);
    return shiftedHist;
  }
