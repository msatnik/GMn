#include <TFile.h>
#include <TTree.h>
#include <TH1D.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <iostream>

void draw_dx_with_different_cuts() {
  const char* filename="/lustre24/expphy/volatile/halla/sbs/msatnik/output/sbs8_70p_simc_deep_sept3.root";
  
    // Open the ROOT file
    TFile *file = TFile::Open(filename);
    if (!file || file->IsZombie()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return;
    }

    // Access the tree (assuming it's named "P")
    TTree *P = (TTree*)file->Get("P");
    if (!P) {
        std::cerr << "Tree P not found in file!" << std::endl;
        return;
    }

    // // Create histograms
    // TH1D *orig = new TH1D("orig", "Original Distribution;hcal_dx;Counts", 200, -2, 2);
    // TH1D *H_arm = new TH1D("H_arm", "H Arm Cuts;hcal_dx;Counts",200, -2, 2);
    // TH1D *e_arm = new TH1D("e_arm", "E Arm Cuts;hcal_dx;Counts", 200, -2, 2);
    // TH1D *both = new TH1D("both", "Both Arm Cuts;hcal_dx;Counts", 200, -2, 2);

    
 // Create histograms
    TH1D *orig = new TH1D("orig", "Original Distribution;hcal_dx;Counts", 140, -2, 1.5);
    TH1D *H_arm = new TH1D("H_arm", "H Arm Cuts;hcal_dx;Counts", 140, -2, 1.5);
    TH1D *H_arm_anti_y_exp = new TH1D("H_arm_anti_y_exp", "H Arm Cuts w/ anti y_exp;hcal_dx;Counts", 140, -2, 1.5);
    TH1D *e_arm = new TH1D("e_arm", "E Arm Cuts;hcal_dx;Counts", 140, -2, 1.5);
    TH1D *both = new TH1D("both", "Both Arm Cuts;hcal_dx;Counts", 140, -2, 1.5);

     // // Create histograms
    // TH1D *orig = new TH1D("orig", "Original Distribution;hcal_dx;Counts", 400, -4, 4);
    // TH1D *H_arm = new TH1D("H_arm", "H Arm Cuts;hcal_dx;Counts", 400, -4, 4);
    // TH1D *e_arm = new TH1D("e_arm", "E Arm Cuts;hcal_dx;Counts", 400, -4, 4);
    // TH1D *both = new TH1D("both", "Both Arm Cuts;hcal_dx;Counts", 400, -4, 4);

    std::string y_exp_cuts = "(hcal_y_exp>-0.5&&hcal_y_exp<0.5)";

  // Define cut strings
    std::string H_arm_string =std::string("hcal_x_exp>-1.27&& hcal_x_exp<0.63 && abs(hcal_dy) < 0.3 && hcal_e >0.04") +"&&"+y_exp_cuts;
    std::string e_arm_string = "bb_ps_e > 0.2 && bb_tr_n == 1 && bb_gem_track_nhits >= 3 && bb_gem_track_chi2ndf<30 && abs(bb_tr_vz) < 0.06 && W2 > 0.5 && W2 < 1.25 && abs(e_over_p - 0.98) < 0.16 &&abs(bb_tr_r_x-bb_tr_r_th*0.9)<0.3 && abs(bb_tr_r_y-0.9*bb_tr_r_ph+0.005)<0.1 ";

    std::string H_arm_anti_y_exp_string = std::string("hcal_x_exp>-1.27&& hcal_x_exp<0.63 && abs(hcal_dy) < 0.3 && hcal_e >0.04") +"&&!"+y_exp_cuts;

    
    //hcal_x_exp>-1.27&&hcal_x_exp<0.63&&hcal_y_exp>-0.4&&hcal_y_exp<0.35 && 

    
    // Combine the cuts for the "both" histogram
    std::string both_string = e_arm_string + " && " + H_arm_string;


    // Fill the histograms based on your cuts
    P->Draw(("hcal_dx>>orig"),"corrected_weight");
    P->Draw(("hcal_dx>>H_arm"), Form("corrected_weight*(%s)",H_arm_string.c_str()));
    P->Draw(("hcal_dx>>e_arm"), Form("corrected_weight*(%s)",e_arm_string.c_str()));
    P->Draw(("hcal_dx>>both"), Form("corrected_weight*(%s)",both_string.c_str()));
    P->Draw(("hcal_dx>>H_arm_anti_y_exp"), Form("corrected_weight*(%s)",H_arm_anti_y_exp_string.c_str()));
    
    // Set colors for the histograms
    orig ->SetLineWidth(2);
    e_arm->SetLineColor(kMagenta);
    e_arm->SetLineWidth(2);
    H_arm->SetLineColor(kGreen+2);
    H_arm->SetLineWidth(2);
    both->SetLineColor(kRed);
    both->SetLineWidth(2);
    H_arm_anti_y_exp->SetLineWidth(2);
    H_arm_anti_y_exp->SetLineColor(kOrange);


    orig->Scale(1/3.6);

    // Draw histograms on a canvas
    TCanvas *c1 = new TCanvas("c1", "Comparison of Cuts", 800, 600);
    c1->SetGrid();
    orig->Draw();             // Draw the original histogram
    H_arm->Draw("same");       // Draw H_arm on top
    e_arm->Draw("same");       // Draw e_arm on top
    both->Draw("same");        // Draw both on top
    H_arm_anti_y_exp->Draw("same");

    // Add a legend
    TLegend *legend = new TLegend(0.7, 0.7, 0.9, 0.9);
    legend->AddEntry(orig, "Original", "l");
    legend->AddEntry(e_arm, "E Arm", "l");
    legend->AddEntry(H_arm, "H Arm", "l");
    legend->AddEntry(both, "Both", "l");
    legend->AddEntry(H_arm_anti_y_exp,"Anti-y_exp","L");
    legend->Draw();

    // Save the canvas to a file
    // c1->SaveAs("hcal_dx_comparison.png");


    // Create the second canvas: Divided canvas showing each histogram separately
    TCanvas *c2 = new TCanvas("c2", "Individual Histograms", 800, 800);
    c2->Divide(2, 2);  // 2x2 grid for 4 histograms

    // Draw each histogram in its own pad
    c2->cd(1);   // Go to pad 1
    orig->Draw();
    TLegend *legend2_1 = new TLegend(0.7, 0.7, 0.9, 0.9);
    legend2_1->AddEntry(orig, "Original", "l");
    legend2_1->Draw();

    c2->cd(2);   // Go to pad 2
    e_arm->Draw();
    TLegend *legend2_2 = new TLegend(0.7, 0.7, 0.9, 0.9);
    legend2_2->AddEntry(e_arm, "E Arm", "l");
    legend2_2->Draw();

    c2->cd(3);   // Go to pad 3
    H_arm->Draw();
    TLegend *legend2_3 = new TLegend(0.7, 0.7, 0.9, 0.9);
    legend2_3->AddEntry(H_arm, "H Arm", "l");
    legend2_3->Draw();

    c2->cd(4);   // Go to pad 4
    both->Draw();
    TLegend *legend2_4 = new TLegend(0.7, 0.7, 0.9, 0.9);
    legend2_4->AddEntry(both, "Both", "l");
    legend2_4->Draw();


    

    // Close the file
    // file->Close();
}
